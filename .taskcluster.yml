# yamllint disable rule:line-length
# This file is rendered via JSON-e by
# - github events - https://github.com/taskcluster/taskcluster/tree/main/services/github
# - cron tasks - https://hg.mozilla.org/ci/ci-admin/file/default/build-decision/
# - action tasks - taskcluster/taskgraph/actions/registry.py
---
version: 1
reporting: checks-v1
policy:
    pullRequests: collaborators
tasks:
    # NOTE: support for actions in ci-admin requires that the `tasks` property be an array *before* JSON-e rendering
    # takes place.
    - $let:
          trustDomain: taskgraph
          ownerEmail:
              $if: 'tasks_for == "github-push"'
              then: '${event.pusher.email}'
              else:
                  $if: 'tasks_for == "github-pull-request"'
                  then: '${event.pull_request.user.login}@users.noreply.github.com'
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${tasks_for}@noreply.mozilla.org'
          baseRepoUrl:
              $if: 'tasks_for == "github-push"'
              then: '${event.repository.html_url}'
              else:
                  $if: 'tasks_for == "github-pull-request"'
                  then: '${event.pull_request.base.repo.html_url}'
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${repository.url}'
          repoUrl:
              $if: 'tasks_for == "github-push"'
              then: '${event.repository.html_url}'
              else:
                  $if: 'tasks_for == "github-pull-request"'
                  then: '${event.pull_request.head.repo.html_url}'
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${repository.url}'
          project:
              $if: 'tasks_for == "github-push"'
              then: '${event.repository.name}'
              else:
                  $if: 'tasks_for == "github-pull-request"'
                  then: '${event.pull_request.head.repo.name}'
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${repository.project}'
          head_branch:
              $if: 'tasks_for == "github-pull-request"'
              then: ${event.pull_request.head.ref}
              else:
                  $if: 'tasks_for == "github-push"'
                  then: ${event.ref}
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${push.branch}'
          head_sha:
              $if: 'tasks_for == "github-push"'
              then: '${event.after}'
              else:
                  $if: 'tasks_for == "github-pull-request"'
                  then: '${event.pull_request.head.sha}'
                  else:
                      $if: 'tasks_for in ["cron", "action"]'
                      then: '${push.revision}'
          ownTaskId:
              $if: '"github" in tasks_for'
              then: {$eval: as_slugid("decision_task")}
              else:
                  $if: 'tasks_for in ["cron", "action"]'
                  then: '${ownTaskId}'
          pullRequestAction:
              $if: 'tasks_for == "github-pull-request"'
              then: ${event.action}
              else: 'UNDEFINED'
      in:
          $if: >
            tasks_for in ["action", "cron"]
            || (tasks_for == "github-push" && head_branch[:10] != "refs/tags/")
            || (tasks_for == "github-pull-request" && pullRequestAction in ["opened", "reopened", "synchronize"])
          then:
              $let:
                  level:
                      $if: 'tasks_for in ["github-push", "cron", "action"] && repoUrl == "https://github.com/taskcluster/taskgraph"'
                      then: 3
                      else: 1
              in:
                  taskId: {$if: 'tasks_for != "action"', then: '${ownTaskId}'}
                  taskGroupId:
                      $if: 'tasks_for == "action"'
                      then:
                          '${action.taskGroupId}'
                      else:
                          '${ownTaskId}'  # same as taskId; this is how automation identifies a decision task
                  schedulerId: '${trustDomain}-level-${level}'

                  created: {$fromNow: ''}
                  deadline: {$fromNow: '1 day'}
                  expires: {$fromNow: '1 year 1 second'}  # 1 second so artifacts expire first
                  metadata:
                      $merge:
                          - owner: "${ownerEmail}"
                            source: "${repoUrl}/raw/${head_sha}/.taskcluster.yml"
                          - $if: 'tasks_for in ["github-push", "github-pull-request"]'
                            then:
                                name: "Decision Task"
                                description: 'The task that creates all of the other tasks in the task graph'
                            else:
                                $if: 'tasks_for == "action"'
                                then:
                                    name: "Action: ${action.title}"
                                    description: |
                                        ${action.description}

                                        Action triggered by clientID `${clientId}`
                                else:
                                    name: "Decision Task for cron job ${cron.job_name}"
                                    description: 'Created by a [cron task](https://firefox-ci-tc.services.mozilla.com/tasks/${cron.task_id})'

                  provisionerId: "${trustDomain}-${level}"
                  workerType: "decision"

                  tags:
                      $if: 'tasks_for in ["github-push", "github-pull-request"]'
                      then:
                          createdForUser: "${ownerEmail}"
                          kind: decision-task
                      else:
                          $if: 'tasks_for == "action"'
                          then:
                              createdForUser: '${ownerEmail}'
                              kind: 'action-callback'
                          else:
                              $if: 'tasks_for == "cron"'
                              then:
                                  kind: cron-task

                  routes:
                      $flatten:
                          - checks
                          - $if: 'tasks_for != "github-pull-request"'
                            then:
                                - "tc-treeherder.v2.${project}.${head_sha}"
                            else: []
                          - $if: 'tasks_for == "github-push"'
                            then:
                                - "index.${trustDomain}.v2.${project}.latest.taskgraph.decision"
                                - "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                            else:
                                $if: 'tasks_for == "action"'
                                then:
                                    - "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.actions.${ownTaskId}"
                                else:
                                    $if: 'tasks_for == "cron"'
                                    then:
                                        - "index.${trustDomain}.v2.${project}.latest.taskgraph.decision-${cron.job_name}"
                                        - "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision-${cron.job_name}"
                                        # list each cron task on this revision, so actions can find them
                                        - 'index.${trustDomain}.v2.${project}.revision.${head_sha}.cron.${ownTaskId}'
                                    else: []

                  scopes:
                      $if: 'tasks_for in ["github-push"]'
                      then:
                          $let:
                              short_head_branch:
                                  $if: 'head_branch[:10] == "refs/tags/"'
                                  then: {$eval: 'head_branch[10:]'}
                                  else:
                                      $if: 'head_branch[:11] == "refs/heads/"'
                                      then: {$eval: 'head_branch[11:]'}
                                      else: ${head_branch}
                          in:
                              - 'assume:repo:${repoUrl[8:]}:branch:${short_head_branch}'
                      else:
                          $if: 'tasks_for == "github-pull-request"'
                          then:
                              - 'assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request'
                          else:
                              $if: 'tasks_for == "action"'
                              then:
                                  - 'assume:repo:${repoUrl[8:]}:action:${action.action_perm}'
                              else:
                                  - 'assume:repo:${repoUrl[8:]}:cron:${cron.job_name}'

                  dependencies: []
                  requires: all-completed

                  priority:
                      # Most times, there is plenty of worker capacity so everything runs
                      # quickly, but sometimes a storm of action tasks lands.  Then we
                      # want, from highest to lowest:
                      # - cron tasks (time-sensitive) (low)
                      # - decision tasks (minimize user-visible delay) (very-low)
                      # - action tasks (avoid interfering with the other two) (lowest)
                      # SCM levels all use different workerTypes, so there is no need for priority
                      # between levels; "low" is the highest priority available at all levels, and
                      # nothing runs at any higher priority on these workerTypes.
                      $if: "tasks_for == 'cron'"
                      then: low
                      else:
                          $if: 'tasks_for in ["github-push", "github-pull-request"]'
                          then: very-low
                          else: lowest  # tasks_for == 'action'
                  retries: 5

                  payload:
                      env:
                          # run-task uses these to check out the source; the inputs
                          # to `mach taskgraph decision` are all on the command line.
                          $merge:
                              - TASKGRAPH_BASE_REPOSITORY: '${baseRepoUrl}'
                                TASKGRAPH_HEAD_REPOSITORY: '${repoUrl}'
                                TASKGRAPH_HEAD_REF: '${head_branch}'
                                TASKGRAPH_HEAD_REV: '${head_sha}'
                                TASKGRAPH_REPOSITORY_TYPE: git
                                REPOSITORIES: {$json: {taskgraph: Taskgraph}}
                              - $if: 'tasks_for in ["github-pull-request"]'
                                then:
                                    TASKGRAPH_PULL_REQUEST_NUMBER: '${event.pull_request.number}'
                              - $if: 'tasks_for == "action"'
                                then:
                                    ACTION_TASK_GROUP_ID: '${action.taskGroupId}'  # taskGroupId of the target task
                                    ACTION_TASK_ID: {$json: {$eval: 'taskId'}}  # taskId of the target task (JSON-encoded)
                                    ACTION_INPUT: {$json: {$eval: 'input'}}
                                    ACTION_CALLBACK: '${action.cb_name}'

                      cache:
                          "${trustDomain}-level-${level}-checkouts-sparse-v2": /builds/worker/checkouts

                      features:
                          taskclusterProxy: true
                          chainOfTrust: true

                      image: mozillareleases/taskgraph:decision-10378fde0bf12adbd64e74313bf72ea3c6caf311ad6af23e2bff1d8f1232a221@sha256:7518c410bdf91142b0e26455d26ddaf861202cfbb3c35d0b1ef85d1ed577a5bd

                      maxRunTime: 1800

                      command:
                          - run-task
                          - '--taskgraph-checkout=/builds/worker/checkouts/src'
                          - '--'
                          - bash
                          - -cx
                          - $let:
                                extraArgs: {$if: 'tasks_for == "cron"', then: '${cron.quoted_args}', else: ''}
                            in:
                                $if: 'tasks_for == "action"'
                                then: >
                                    cd /builds/worker/checkouts/src &&
                                    ln -s /builds/worker/artifacts artifacts &&
                                    pip3 install -r requirements/base.txt &&
                                    pip3 install --user --no-deps . &&
                                    ~/.local/bin/taskgraph action-callback
                                else: >
                                    cd /builds/worker/checkouts/src &&
                                    ln -s /builds/worker/artifacts artifacts &&
                                    pip3 install --user . &&
                                    ~/.local/bin/taskgraph decision
                                    --pushlog-id='0'
                                    --pushdate='0'
                                    --project='${project}'
                                    --owner='${ownerEmail}'
                                    --level='${level}'
                                    --repository-type=git
                                    --tasks-for='${tasks_for}'
                                    --base-repository="${repoUrl}"
                                    --head-repository="${repoUrl}"
                                    --head-ref="${head_sha}"
                                    --head-rev="${head_sha}"
                                    ${extraArgs}

                      artifacts:
                          'public':
                              type: 'directory'
                              path: '/builds/worker/artifacts'
                              expires: {$fromNow: '1 year'}
                          'public/docker-contexts':
                              type: 'directory'
                              path: '/builds/worker/checkouts/src/docker-contexts'
                              # This needs to be at least the deadline of the
                              # decision task + the docker-image task deadlines.
                              # It is set to a week to allow for some time for
                              # debugging, but they are not useful long-term.
                              expires: {$fromNow: '7 day'}

                  extra:
                      $merge:
                          - treeherder:
                                $merge:
                                    - machine:
                                          platform: gecko-decision
                                    - $if: 'tasks_for in ["github-push", "github-pull-request"]'
                                      then:
                                          symbol: D
                                      else:
                                          $if: 'tasks_for == "action"'
                                          then:
                                              groupName: 'action-callback'
                                              groupSymbol: AC
                                              symbol: "${action.symbol}"
                                          else:
                                              groupSymbol: cron
                                              symbol: "${cron.job_symbol}"
                          - $if: 'tasks_for == "action"'
                            then:
                                parent: '${action.taskGroupId}'
                                action:
                                    name: '${action.name}'
                                    context:
                                        taskGroupId: '${action.taskGroupId}'
                                        taskId: {$eval: 'taskId'}
                                        input: {$eval: 'input'}
                                        clientId: {$eval: 'clientId'}
                          - $if: 'tasks_for == "cron"'
                            then:
                                cron: {$json: {$eval: 'cron'}}
                          - tasks_for: '${tasks_for}'
